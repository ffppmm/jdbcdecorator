<?xml version="1.0"?>

<project name="JdbcLogger" default="usage" basedir=".">
<!-- Thanks to Hannes WallnÃ¶fer who wrote the helma ant build script -->
	
    <!-- =================================================================== -->
    <!-- Initializes some variables                                          -->
    <!-- =================================================================== -->
    <target name="init">
        <property name="Name" value="Fpmedv utility classes"/>
        <property name="year" value="2009-${year}"/>
        <property name="version" value="0.1"/>
        <property name="project" value="fpmedv-util"/>

        <property name="home.dir" value=".."/>

        <property name="build.dir" value="${home.dir}/build"/>
        <property name="build.src" value="${home.dir}/src"/>
        <property name="build.lib" value="${home.dir}/lib"/>
        <property name="build.classes" value="${home.dir}/bin"/>
        <property name="build.docs" value="${home.dir}/docs"/>
        <property name="build.work" value="${home.dir}/work"/>
    	  <property name="build.work.src" value="${build.work}/src"/>
        <property name="build.dist" value="${home.dir}/dist"/>
        <property name="build.javadocs" value="${home.dir}/docs"/>

        <property name="jar.name" value="${project}"/>
        <property name="package.name" value="${project}-${version}"/>

        <property name="debug" value="on"/>
        <property name="optimize" value="on"/>
        <property name="deprecation" value="off"/>

        <tstamp/>

        <filter token="year" value="${year}"/>
        <filter token="version" value="${version}"/>
        <filter token="date" value="${TODAY}"/>
    </target>


    <!-- =================================================================== -->
    <!-- Help on usage                                                       -->
    <!-- =================================================================== -->
    <target name="help" depends="usage" />
    <target name="usage">
        <echo message="fpmedv util build instructions"/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=" available targets are:"/>
        <echo message=""/>
        <echo message=" compile       --> compiles the source code to ./classes"/>
        <echo message=" jar           --> generates the ../jdbc-logger-YYYYMMDD.jar file"/>
        <echo message=" javadocs      --> generates the API docs"/>
        <echo message=" package       --> generates the distribution (zip and tar.gz)"/>
        <echo message=" clean         --> clean up temporary build directories and files"/>
        <echo message=""/>
        <echo message=" usage         --> provides help on using the build tool (default)"/>
        <echo message=""/>
        <echo message=" See comments inside the build.xml file for more details."/>
        <echo message="-------------------------------------------------------------"/>
        <echo message=""/>
        <echo message=""/>
    </target>


    <!-- =================================================================== -->
    <!-- Compiles the source directory                                       -->
    <!-- =================================================================== -->
    <target name="compile" depends="init">
        <mkdir dir="${build.classes}"/>
        <!-- copy source files over to work directory -->
        <delete dir="${build.work.src}" quiet="true"/>
        <mkdir dir="${build.work.src}" />
        <copy todir="${build.work.src}" overwrite="true">
            <fileset dir="${build.src}" includes="**/*.java"/>
        </copy>
        <javac srcdir="${build.work.src}"
            source="1.5"
            target="1.5"
            destdir="${build.classes}"
            debug="${debug}"
            deprecation="${deprecation}"
            optimize="${optimize}"
            includeAntRuntime="no">
        </javac>
        <delete dir="${build.work.src}"/>
    </target>


    <!-- =================================================================== -->
    <!-- Creates the .jar file (snapshot) in the base-directory              -->
    <!-- =================================================================== -->
    <target name="jar" depends="compile">
        <jar jarfile="${build.work}/${jar.name}-${DSTAMP}.jar"
            basedir="${build.classes}"
            excludes="**/package.html"/>
        <copy file="${build.work}/${jar.name}-${DSTAMP}.jar" 
              tofile="${home.dir}/${jar.name}.jar"/>
    </target>


    <!-- =================================================================== -->
    <!-- Creates the javadoc API documentation                               -->
    <!-- =================================================================== -->
    <target name="javadocs" depends="init">
        <mkdir dir="${build.javadocs}"/>
        <javadoc packagenames="at.*"
            sourcepath="${build.src}"
            destdir="${build.javadocs}"
            author="false"
            private="true"
            version="false"
            windowtitle="${Name} ${version} API"
            doctitle="${Name} ${version} API"
            bottom="Copyright &#169; ${year} fpmedv.at. All Rights Reserved."
            classpathref="build.class.path"
        />
    </target>

	
	    <!-- =================================================================== -->
	    <!-- Creates the full distribution                                       -->
	    <!-- =================================================================== -->
	    <target name="package" depends="jar,javadocs">
	        <mkdir dir="${build.work}"/>
	        
	        <!-- zip up the whole thing -->
	        <antcall target="package-tgz">
	            <param name="filename" value="${package.name}"/>
	        </antcall>
	        <antcall target="package-zip">
	            <param name="filename" value="${package.name}"/>
	        </antcall>

	        <!-- make the src distributions -->
	        <antcall target="package-src-tgz">
	            <param name="filename" value="${package.name}"/>
	        </antcall>
	        <antcall target="package-src-zip">
	            <param name="filename" value="${package.name}"/>
	        </antcall>

	        <!-- clean up -->
	        <delete dir="${build.work}"/>
	    </target>


    <!-- =================================================================== -->
    <!-- Packages the work directory with TAR-GZIP                           -->
    <!-- needs parameter ${filename} for final dist-file                     -->
    <!-- =================================================================== -->
    <target name="package-tgz" depends="init">
        <mkdir dir="${build.dist}" />
        <tar tarfile="${build.dist}/${filename}.tar">
            <tarfileset dir="${home.dir}" prefix="${filename}">
                <include name="docs/**"/>
                <include name="helma/**"/>
                <include name="LICENSE"/>
                <include name="README"/>
                <include name="${jar.name}.jar" />
            </tarfileset>
        </tar>
        <gzip zipfile="${build.dist}/${filename}.tar.gz" src="${build.dist}/${filename}.tar"/>
        <delete file="${build.dist}/${filename}.tar"/>
    </target>


    <!-- =================================================================== -->
    <!-- Packages the work directory with ZIP                                -->
    <!-- needs parameter ${filename} for final dist-file                     -->
    <!-- =================================================================== -->
    <target name="package-zip" depends="init">
        <mkdir dir="${build.dist}" />
        <zip zipfile="${build.dist}/${filename}.zip">
            <zipfileset dir="${home.dir}" prefix="${filename}">
                <include name="docs/**"/>
                <include name="helma/**"/>
                <include name="LICENSE"/>
                <include name="README"/>
                <include name="${jar.name}.jar" />
            </zipfileset>
        </zip>
    </target>


    <!-- =================================================================== -->
    <!-- Packages src and build directories with TAR-GZIP                    -->
    <!-- needs parameter ${filename} for final dist-file                     -->
    <!-- =================================================================== -->
    <target name="package-src-tgz" depends="init">
        <mkdir dir="${build.dist}" />
        <tar tarfile="${build.dist}/${filename}-src.tar">
            <tarfileset dir="${home.dir}" prefix="${filename}">
                <include name="src/**"/>
                <include name="build/**"/>
                <include name="docs/**"/>
                <include name="helma/**"/>
                <include name="LICENSE"/>
                <include name="README"/>
            	<exclude name="**/.svn**"/>
            </tarfileset>
        </tar>
        <gzip zipfile="${build.dist}/${filename}-src.tar.gz" src="${build.dist}/${filename}-src.tar"/>
        <delete file="${build.dist}/${filename}-src.tar"/>
    </target>


    <!-- =================================================================== -->
    <!-- Packages src and build directories with ZIP                         -->
    <!-- needs parameter ${filename} for final dist-file                     -->
    <!-- =================================================================== -->
    <target name="package-src-zip" depends="init">
        <mkdir dir="${build.dist}" />
        <zip zipfile="${build.dist}/${filename}-src.zip">
            <zipfileset dir="${home.dir}" prefix="${filename}">
              <include name="src/**"/>
              <include name="build/**"/>
              <include name="docs/**"/>
              <include name="helma/**"/>
              <include name="LICENSE"/>
              <include name="README"/>
              <exclude name="**/.svn**"/>
            </zipfileset>
        </zip>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans up temporary build directories                               -->
    <!-- =================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${build.work}" />
        <delete dir="${build.classes}" />
        <delete dir="${build.dist}" />
        <delete dir="${build.docs}" />
        <delete file="${home.dir}/${jar.name}.jar" />
    </target>

</project>
